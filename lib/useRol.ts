// lib/useRol.ts
import { useEffect, useState } from "react";
import { auth } from "./auth";
import { db } from "./firebase";
import { doc, getDoc, collection, query, where, getDocs } from "firebase/firestore";
import { useAuthState } from "react-firebase-hooks/auth";

interface RolInfo {
  tipo: string;
  negocioID: string;
}

interface SuscripcionInfo {
  diasRestantes: number | null;
  planActual: string | null;
  suscripcionActiva: boolean;
  fechaVencimiento: string | null;
}

export function useRol() {
  const [user, loading] = useAuthState(auth);
  const [rol, setRol] = useState<RolInfo | null>(null);
  const [suscripcion, setSuscripcion] = useState<SuscripcionInfo>({
    diasRestantes: null,
    planActual: null,
    suscripcionActiva: false,
    fechaVencimiento: null
  });

  useEffect(() => {
    const obtenerRolYSuscripcion = async () => {
      if (loading || !user) return;
      console.log("üîç Buscando usuario con UID:", user.uid);

      try {
        // ‚úÖ Leer primero desde la colecci√≥n global "usuarios" para obtener el negocioID
        const globalRef = doc(db, `usuarios/${user.uid}`);
        const globalSnap = await getDoc(globalRef);

        if (!globalSnap.exists()) {
          console.warn("‚õî No se encontr√≥ el usuario en /usuarios/");
          return;
        }

        const { negocioID } = globalSnap.data();

        if (!negocioID) {
          console.warn("‚õî El documento global no tiene negocioID");
          return;
        }

        // ‚úÖ Luego buscamos el documento dentro del negocio para saber el rol
        const negocioRef = doc(db, `negocios/${negocioID}/usuarios/${user.uid}`);
        const snap = await getDoc(negocioRef);

        if (!snap.exists()) {
          console.warn("‚õî No se encontr√≥ el usuario dentro del negocio");
          return;
        }

        const data = snap.data();
        const tipoRol = data.rol || "sin rol";

        setRol({
          tipo: tipoRol,
          negocioID,
        });

        console.log("‚úÖ Rol obtenido:", tipoRol, "| Negocio:", negocioID);

        // üÜï NUEVO: Calcular suscripci√≥n seg√∫n rol
        if (tipoRol === "admin") {
          await calcularSuscripcion(user.uid);
        } else {
          // Si es empleado, buscar admin del negocio y usar su suscripci√≥n
          await buscarSuscripcionDelAdmin(negocioID);
        }

      } catch (error) {
        console.error("‚ùå Error al obtener rol:", error);
      }
    };

    const calcularSuscripcion = async (userId: string) => {
      try {
        console.log("üîç Buscando suscripci√≥n para usuario:", userId);
        
        // üîß CORREGIDO: Leer del documento principal del usuario
        const userRef = doc(db, `usuarios/${userId}`);
        const userSnap = await getDoc(userRef);
        
        if (!userSnap.exists()) {
          console.warn("‚õî No se encontr√≥ usuario");
          setSuscripcion({
            diasRestantes: null,
            planActual: "gratuito",
            suscripcionActiva: false,
            fechaVencimiento: null
          });
          return;
        }

        const userData = userSnap.data();
        
        // üîß CORREGIDO: Leer campos del documento principal
        const planActivo = userData.planActivo;
        const fechaVencimiento = userData.fechaVencimiento?.toDate();
        const estado = userData.estado;
        
        if (!planActivo || estado !== "activo") {
          console.warn("‚õî No hay plan activo o estado no es activo");
          setSuscripcion({
            diasRestantes: null,
            planActual: "gratuito",
            suscripcionActiva: false,
            fechaVencimiento: null
          });
          return;
        }
        
        // Calcular d√≠as restantes
        const ahora = new Date();
        const diasRestantes = fechaVencimiento 
          ? Math.ceil((fechaVencimiento.getTime() - ahora.getTime()) / (1000 * 60 * 60 * 24))
          : null;

        const suscripcionActiva = diasRestantes ? diasRestantes > 0 : false;

        setSuscripcion({
          diasRestantes,
          planActual: planActivo,
          suscripcionActiva,
          fechaVencimiento: fechaVencimiento?.toLocaleDateString() || null
        });

        console.log("‚úÖ Suscripci√≥n encontrada:", {
          activa: suscripcionActiva,
          d√≠as: diasRestantes,
          plan: planActivo,
          vencimiento: fechaVencimiento?.toLocaleDateString()
        });

      } catch (error) {
        console.error("‚ùå Error al calcular suscripci√≥n:", error);
        // En caso de error, usar datos por defecto
        setSuscripcion({
          diasRestantes: null,
          planActual: "gratuito",
          suscripcionActiva: false,
          fechaVencimiento: null
        });
      }
    };

    const buscarSuscripcionDelAdmin = async (negocioID: string) => {
      try {
        console.log("üîç Buscando admin del negocio:", negocioID);
        
        // Buscar admin del negocio
        const usuariosQuery = query(
          collection(db, "usuarios"),
          where("negocioID", "==", negocioID)
        );

        const usuariosSnap = await getDocs(usuariosQuery);
        
        if (usuariosSnap.empty) {
          console.warn("‚õî No se encontraron usuarios del negocio");
          return;
        }

        // Buscar el admin entre los usuarios
        let adminUID = null;
        for (const userDoc of usuariosSnap.docs) {
          const userData = userDoc.data();
          if (userData.rol === "admin") {
            adminUID = userDoc.id;
            console.log("üëë Admin encontrado:", userData.email);
            break;
          }
        }

        if (!adminUID) {
          console.warn("‚õî No se encontr√≥ admin del negocio");
          return;
        }
        
        // Obtener suscripci√≥n del admin
        await calcularSuscripcion(adminUID);

      } catch (error) {
        console.error("‚ùå Error al buscar suscripci√≥n del admin:", error);
        setSuscripcion({
          diasRestantes: null,
          planActual: "gratuito",
          suscripcionActiva: false,
          fechaVencimiento: null
        });
      }
    };

    obtenerRolYSuscripcion();
  }, [user, loading]);

  return { 
    rol, 
    suscripcion,
    loading: loading || rol === null 
  };
}